// Code generated by MockGen. DO NOT EDIT.
// Source: discount_service.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mendezdev/mytheresa-api/internal/core/domain"
)

// MockDiscountService is a mock of DiscountService interface.
type MockDiscountService struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountServiceMockRecorder
}

// MockDiscountServiceMockRecorder is the mock recorder for MockDiscountService.
type MockDiscountServiceMockRecorder struct {
	mock *MockDiscountService
}

// NewMockDiscountService creates a new mock instance.
func NewMockDiscountService(ctrl *gomock.Controller) *MockDiscountService {
	mock := &MockDiscountService{ctrl: ctrl}
	mock.recorder = &MockDiscountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountService) EXPECT() *MockDiscountServiceMockRecorder {
	return m.recorder
}

// GetDiscounts mocks base method.
func (m *MockDiscountService) GetDiscounts() ([]domain.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscounts")
	ret0, _ := ret[0].([]domain.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscounts indicates an expected call of GetDiscounts.
func (mr *MockDiscountServiceMockRecorder) GetDiscounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscounts", reflect.TypeOf((*MockDiscountService)(nil).GetDiscounts))
}
