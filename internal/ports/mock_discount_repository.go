// Code generated by MockGen. DO NOT EDIT.
// Source: discount_repository.go

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mendezdev/mytheresa-api/internal/core/domain"
)

// MockDiscountRepository is a mock of DiscountRepository interface.
type MockDiscountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDiscountRepositoryMockRecorder
}

// MockDiscountRepositoryMockRecorder is the mock recorder for MockDiscountRepository.
type MockDiscountRepositoryMockRecorder struct {
	mock *MockDiscountRepository
}

// NewMockDiscountRepository creates a new mock instance.
func NewMockDiscountRepository(ctrl *gomock.Controller) *MockDiscountRepository {
	mock := &MockDiscountRepository{ctrl: ctrl}
	mock.recorder = &MockDiscountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscountRepository) EXPECT() *MockDiscountRepositoryMockRecorder {
	return m.recorder
}

// GetDiscounts mocks base method.
func (m *MockDiscountRepository) GetDiscounts() ([]domain.Discount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscounts")
	ret0, _ := ret[0].([]domain.Discount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscounts indicates an expected call of GetDiscounts.
func (mr *MockDiscountRepositoryMockRecorder) GetDiscounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscounts", reflect.TypeOf((*MockDiscountRepository)(nil).GetDiscounts))
}
